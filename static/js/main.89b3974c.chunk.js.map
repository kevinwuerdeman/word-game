{"version":3,"sources":["GameDisplay.js","App.js","AdminApp.js","serviceWorker.js","index.js","Routes.js"],"names":["GameDisplay","props","time","words","scoreBoard","letters","input","name","handleChange","handleSave","gameID","startGame","admin","leader","disabled","length","react_default","a","createElement","className","Object","keys","map","key","playerName","wordContent","id","type","value","onChange","onClick","App","state","players","gameStart","score","gameRef","firebase","database","ref","child","_this","match","params","wordRef","playerRef","checkEntry","word","tempword","concat","i","indexOf","splice","handlePlayer","snapshot","playerCount","val","setState","handleGame","Date","now","setInterval","clearInterval","handleNewWords","forEach","entry","event","newInput","target","push","points","orderByChild","equalTo","on","this","prevProps","prevState","set","_this$state","GameDisplay_GameDisplay","React","Component","AdminApp","generateRandomLetter","vowels","consonants","random","arr","Math","floor","randomLetters","newVowel","newConsonant","full","newLetter","console","log","update","_this2","addGameRef","then","Boolean","window","location","hostname","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","react_router_dom","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89b3974c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nexport const GameDisplay = (props) => {\n  const {time, words, scoreBoard, letters, input, name, handleChange, handleSave, gameID, startGame, admin, leader} = props\n  let disabled = time < 60 && time > 0 && input.length > 0;\n  return (\n    <div className=\"App\">\n    <header className=\"App-header\">\n    <div className=\"container\">\n      <div className=\"left-side\">\n        <div className=\"words\">\n        <h1 className=\"word-title\">Played Words:</h1>\n          <div className=\"inner-container\">\n            { words && Object.keys(words).map((key) => {\n                return <li className=\"played-words\" key={key}>{words[key].playerName + ' played:  \"'+ words[key].wordContent +'\"' }</li>\n            })}\n          </div>\n        </div>\n        <div className=\"letter-input\">\n          <h2> Letters: {letters}</h2>\n          <h1 id=\"output\">Input: </h1>\n          <input type=\"textfield\" name=\"input\" id=\"latestStatus\" value={input} onChange={handleChange}/>\n          <button className=\"button\" onClick={handleSave} disabled={!disabled}>Save</button>\n        </div>\n      </div>\n      <div className=\"right-side\">\n        <h2>{time}</h2>\n        { admin && <button className=\"button\" onClick={startGame} >Start!</button> }\n        <h1> Welcome To The Game: {name}</h1>\n        {time === 0 && <h2> {leader.name} wins!!!</h2>}\n        <div className=\"word-score\">\n          <div className=\"scoreBoard\">\n            <h2>Scoreboard:</h2>\n              <div className=\"\">\n              { scoreBoard && Object.keys(scoreBoard).map((key) => {\n                  return <li key={key}>{key} - points: {scoreBoard[key]}</li>\n              })}\n              </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    </header>\n    <h5>Invite players with this link: https://kevinwuerdeman.github.io/word-game/#/game/{gameID}</h5>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport './App.css';\nimport { GameDisplay } from \"./GameDisplay\";\nimport firebase from \"firebase/app\";\n\n\nclass App extends React.Component {\n  state = {\n    name: '',\n    input: '',\n    gameID: '',\n    words: {},\n    letters: [],\n    players: 0,\n    time: 60,\n    gameStart: false,\n    scoreBoard: {},\n    leader: {name: \"player 1\", score: 0}\n  }\n\n  gameRef = firebase.database().ref().child('games').child(this.props.match.params.id);;\n  wordRef = firebase.database().ref().child('words').child(this.props.match.params.id);\n  playerRef = firebase.database().ref().child('players').child(this.props.match.params.id);\n\n\n  componentDidMount() {\n    this.wordRef.on('value', this.handleNewWords);\n    this.setState({gameID: this.props.match.params.id})\n    this.playerRef.on('value', this.handlePlayer);\n    this.gameRef.on('value', this.handleGame);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.gameID && this.state.gameID) {\n      this.playerRef.push().set({name: `player ${this.state.players +=1 }`})\n      }\n    }\n\n  checkEntry = (word) => {\n    let tempword = [].concat(this.state.letters);\n    for (let i = 0; i < word.length; i++) {\n      if (tempword.indexOf(word[i]) === -1) {\n        return false;\n      } else {\n        tempword.splice(tempword.indexOf(word[i]),1);\n      }\n    }\n    return true;\n  }\n\n  handlePlayer = (snapshot) => {\n    if(this.state.gameID && !this.state.name) {\n      const playerCount = Object.keys(snapshot.val()).length\n      this.setState({players: playerCount, name:`player ${playerCount}`})\n    }\n  }\n\n  handleGame = (snapshot) => {\n    if (this.state.gameID) {\n      this.setState({gameStart: snapshot.val().gameStart, letters: snapshot.val().letters}, () => {\n        if (this.state.gameStart && this.state.time > -1) {\n          let start = Date.now();\n          let id = setInterval(() => {\n          if (this.state.time < 1) {\n            clearInterval(id)\n          }else {\n            this.setState({time: this.state.time-=1})\n          }\n        }, 1000);\n      }\n      });\n    }\n  }\n\n  handleNewWords = (snapshot) => {\n    this.setState({words: snapshot.val()});\n    const scoreBoard = {}\n    snapshot.val() && Object.keys(snapshot.val()).forEach((entry) => {\n      const word = snapshot.val()[entry]\n      if (!scoreBoard[word.playerName]) {\n        scoreBoard[word.playerName] = 1;\n      } else {\n        scoreBoard[word.playerName]++;\n      }\n      if(scoreBoard[word.playerName] > this.state.leader.score) {\n        this.setState({scoreBoard, leader: {name: word.playerName, score: scoreBoard[word.playerName]}})\n      }\n    })\n      this.setState({scoreBoard})\n  }\n\n  handleChange = (event) => {\n    let newInput = event.target.value;\n    this.setState({input: newInput});\n  }\n\n  // update game\n  handleSave = () => {\n    if(!this.state.words && this.checkEntry(this.state.input)) {\n      this.wordRef.push({\n        wordContent: this.state.input,\n        playerName: this.state.name,\n        points: 1\n      });\n    } else {\n      this.wordRef.orderByChild(\"wordContent\").equalTo(this.state.input).on(\"value\", (snapshot) => {\n      if (!snapshot.val() && this.checkEntry(this.state.input)) {\n        this.wordRef.push({\n          wordContent: this.state.input,\n          playerName: this.state.name,\n          points: 1\n        });\n      }\n    })\n    }\n    this.setState({input: \"\"});\n  }\n\n  render () {\n    const { words, time, input, letters, scoreBoard, name, leader } = this.state;\n    return (\n      <div className=\"App\">\n        <GameDisplay\n          words={words}\n          time={time}\n          input={input}\n          letters={letters}\n          scoreBoard={scoreBoard}\n          name={name}\n          handleChange={this.handleChange}\n          handleSave={this.handleSave}\n          admin={false}\n          leader={leader}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './App.css';\nimport firebase from \"firebase/app\";\nimport { GameDisplay } from \"./GameDisplay\";\n\n\nclass AdminApp extends React.Component {\n  state = {\n    name: '',\n    input: '',\n    gameID: '',\n    words: {},\n    letters: [],\n    players: 0,\n    time: 60,\n    gameStart: false,\n    scoreBoard: {},\n    leader: {name: \"player 1\", score: 0}\n  }\n\n  gameRef = firebase.database().ref().child('games');\n  wordRef = firebase.database().ref().child('words');\n  playerRef = firebase.database().ref().child('players');\n\n\n  componentDidMount() {\n    const addGameRef = this.gameRef.push();\n    addGameRef.set({\n      name: \"test1\",\n      gameStart: false,\n      letters: [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",]\n    }).then(() => {\n      this.setState({gameID: addGameRef.key});\n    })\n    this.wordRef.on('value', this.handleNewWords);\n    this.gameRef.on('value', this.handleGame);\n    this.playerRef.on('value', this.handlePlayer);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.gameID && this.state.gameID) {\n      // this.generateRandomLetter()\n      this.wordRef = firebase.database().ref().child('words').child(this.state.gameID);\n      this.gameRef = firebase.database().ref().child('games').child(this.state.gameID);\n      this.playerRef.child(this.state.gameID).push().set({\n        name: `player ${this.state.players +=1 }`})\n      }\n    }\n\n  generateRandomLetter = () => {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    const random = (arr) => Math.floor(Math.random() * arr.length);\n    let randomLetters = []\n    for(let i = 0; i < 2; i++) {\n      const newVowel = vowels[random(vowels)];\n      randomLetters = randomLetters.concat([newVowel])\n      vowels.splice(vowels.indexOf(newVowel),1)\n    }\n    for(let i = 0; i < 2; i++) {\n      const newConsonant = consonants[random(consonants)];\n      randomLetters = randomLetters.concat([newConsonant])\n      consonants.splice(consonants.indexOf(newConsonant),1)\n    }\n    let full = vowels.concat(consonants)\n    for(let i = 0; i < 5; i++) {\n      const newLetter = full[random(full)];\n      randomLetters = randomLetters.concat([newLetter])\n      full.splice(full.indexOf(newLetter),1)\n    }\n    // this.gameRef.child(this.state.gameID).update({letters: randomLetters})\n    // this.setState({letters: randomLetters});\n    console.log(randomLetters)\n    return randomLetters\n  }\n\n  checkEntry = (word) => {\n    let tempword = [].concat(this.state.letters);\n    for (let i = 0; i < word.length; i++) {\n      if (tempword.indexOf(word[i]) === -1) {\n        return false;\n      } else {\n        tempword.splice(tempword.indexOf(word[i]),1);\n      }\n    }\n    return true;\n  }\n\n  handlePlayer = (snapshot) => {\n    if(this.state.gameID && !this.state.name) {\n      const playerCount = Object.keys(snapshot.val()[this.state.gameID]).length\n      this.setState({players: playerCount, name:`player ${playerCount}`})\n    }\n  }\n\n  handleGame = (snapshot) => {\n    if (this.state.gameID) {\n      this.setState({gameStart: snapshot.val()[this.state.gameID].gameStart, letters: snapshot.val()[this.state.gameID].letters}, () => {\n        if (this.state.gameStart && this.state.time > -1) {\n          let start = Date.now();\n          let id = setInterval(() => {\n          if (this.state.time < 1) {\n            clearInterval(id)\n          }else {\n            this.setState({time: this.state.time-=1})\n          }\n        }, 1000);\n        }\n      });\n    }\n  }\n\n  handleNewWords = (snapshot) => {\n    this.setState({words: snapshot.val()[this.state.gameID]});\n    const scoreBoard = {}\n    snapshot.val()[this.state.gameID] && Object.keys(snapshot.val()[this.state.gameID]).forEach((entry) => {\n      const word = snapshot.val()[this.state.gameID][entry]\n      if (!scoreBoard[word.playerName]) {\n        scoreBoard[word.playerName] = 1;\n      } else {\n        scoreBoard[word.playerName]++;\n      }\n        if(scoreBoard[word.playerName] > this.state.leader.score) {\n        this.setState({scoreBoard, leader: {name: word.playerName, score: scoreBoard[word.playerName]}})\n      }\n    })\n      this.setState({scoreBoard})\n  }\n\n  handleChange = (event) => {\n    let newInput = event.target.value;\n    this.setState({input: newInput});\n  }\n\n  // update game\n  handleSave = () => {\n    if(!this.state.words && this.checkEntry(this.state.input)) {\n      this.wordRef.push({\n        wordContent: this.state.input,\n        playerName: this.state.name,\n        points: 1\n      });\n    } else {\n      this.wordRef.orderByChild(\"wordContent\").equalTo(this.state.input).on(\"value\", (snapshot) => {\n      if (!snapshot.val() && this.checkEntry(this.state.input)) {\n        this.wordRef.push({\n          wordContent: this.state.input,\n          playerName: this.state.name,\n          points: 1\n        });\n      }\n    })\n    }\n    this.setState({input: \"\"});\n  }\n\n  startGame = () => {\n    // this.gameRef.child(this.state.gameID).update({letters: randomLetters})\n    this.gameRef.update({gameStart: true, letters: this.generateRandomLetter()})\n    // this.generateRandomLetter();\n  }\n\n  render () {\n    const { words, time, input, letters, scoreBoard, name, gameID, startGame, leader } = this.state;\n    return (\n      <div className=\"App\">\n        <GameDisplay\n          words={words}\n          time={time}\n          input={input}\n          letters={letters}\n          scoreBoard={scoreBoard}\n          name={name}\n          handleChange={this.handleChange}\n          handleSave={this.handleSave}\n          gameID={gameID}\n          startGame={this.startGame}\n          admin={true}\n          leader={leader}\n          />\n      </div>\n    );\n  }\n}\n\nexport default AdminApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Routes } from './Routes';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAaz7pGlhd6hXvNg1s1ocWiHAe_vZcXzcg\",\n  authDomain: \"word-game-17224.firebaseapp.com\",\n  databaseURL: \"https://word-game-17224.firebaseio.com\",\n  projectId: \"word-game-17224\",\n  storageBucket: \"word-game-17224.appspot.com\",\n  messagingSenderId: \"217843913120\",\n  appId: \"1:217843913120:web:6651d79a97b217c6\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n// const history = createHistory();\nReactDOM.render(\n  <HashRouter>\n    <Routes />\n  </HashRouter>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport App from './App';\nimport AdminApp from './AdminApp';\nimport { Route, Switch} from 'react-router-dom';\n\n\nexport const Routes = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={AdminApp} />\n      <Route path=\"/game/:id\" component={App} />\n    </Switch>\n  );\n}\n\n\n"],"sourceRoot":""}